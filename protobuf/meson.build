project('protobuf', 'cpp', version : '0.1', default_options : ['cpp_std=c++17'])

includes = include_directories('..')
protoc    = find_program('protoc', required : true)
protobuf  = dependency('protobuf', required : true)
benchmark = dependency('benchmark', required : true)
boost     = dependency('boost', modules : ['unit_test_framework', 'system'])
threads   = dependency('threads')
json      = dependency('jsoncpp')
clangformat = find_program('clang-format', required : true)
pmr_gen   = find_program('generator.sh', required : true)

protoc        = generator(protoc, output : ['@BASENAME@.pb.cc', '@BASENAME@.pb.h'], arguments : ['--proto_path=@CURRENT_SOURCE_DIR@', '--cpp_out=@BUILD_DIR@', '@INPUT@'])
tutorial_src  = protoc.process('tutorial.proto')
tutorial_lib  = static_library('tutorial', tutorial_src)
tutorial_dep  = declare_dependency(link_with : tutorial_lib, include_directories: tutorial_lib.private_dir_include())

pmr_gen          = generator(pmr_gen, output : ['@BASENAME@.hpp'], arguments : ['@INPUT@','@OUTPUT@'])
pmr_tutorial_src = pmr_gen.process('tutorial.proto')
pmr_tutorial_lib = static_library('pmr_tutorial', pmr_tutorial_src)
pmr_tutorial_dep = declare_dependency(link_with : pmr_tutorial_lib, include_directories: pmr_tutorial_lib.private_dir_include())

a  = executable('a.out',  'test.cpp',       dependencies : [tutorial_dep, pmr_tutorial_dep, json, protobuf, boost], cpp_args : '-DWITH_JSON')
b  = executable('b.out',  'benchmark.cpp',  dependencies : [tutorial_dep, protobuf, boost, benchmark])
b2 = executable('b2.out', 'benchmark2.cpp', dependencies : [tutorial_dep, protobuf, pmr_tutorial_dep, boost, benchmark], include_directories : includes)
test('basic test', a, args : ['-l', 'all'])
benchmark('protobuf', b)
benchmark('protobuf', b2)
#run_target('bench', command : ['./build/b.out'])