{% if not x_hpp_name %}
class server
{
    log4cxx::LoggerPtr sLogger = Logger::Get("access");
{% if x_prometheus %}
    struct Metrics
    {
    {%- call(doc, path, method, name) _for_every_method(doc) -%}
        {% set tag = 'api="' + doc['info']['title'] + '", version="' + doc['info']['version'] + '", method="' + name + '"' %}
        {% set _open = '{' %}
        {% set _close = '}' %}
        Prometheus::Counter<> requests_{{ name }}      {R"(swagger_requests{{ _open }}{{ tag }}{{ _close }})"};
        Prometheus::Time      time_{{ name }}          {R"(swagger_time{{ _open }}{{ tag }}{{ _close }})"};
        Prometheus::Counter<> responses_{{ name }}_2xx {R"(swagger_responses{{ _open }}{{ tag }}, status="2xx"{{ _close }})"};
        Prometheus::Counter<> responses_{{ name }}_4xx {R"(swagger_responses{{ _open }}{{ tag }}, status="4xx"{{ _close }})"};
        Prometheus::Counter<> responses_{{ name }}_5xx {R"(swagger_responses{{ _open }}{{ tag }}, status="5xx"{{ _close }})"};
    {%- endcall -%}
    };
    Metrics m_Metrics;
{% endif %}

{% if x_sentry %}
    std::mutex m_SentryLock;
    time_t m_SentryRateLimit = 0;
    time_t m_SentryLastCall = 0;
    using SentryHandler = std::function<void(Sentry::Message& aMessage)>;
    SentryHandler m_SentryHandler;
{% endif %}
{% if x_jaeger %}
    using JaegerHandler = std::function<void(Jaeger::Trace& aTrace)>;
    JaegerHandler m_JaegerHandler;
{% endif %}
{% if x_queue %}
    Threads::QueueExecutor* m_Queue = nullptr;
{% endif %}
{% if x_bearer %}
    const Jwt::IFace* m_Jwt = nullptr;
    Jwt::Claim __auth_helper(const asio_http::Request& aRequest);
{% endif %}
{% if x_discovery %}
    std::unique_ptr<SD::NotifyWeight> m_Notify;
{% endif %}

public:

{% if x_sentry %}
    void with_sentry(SentryHandler aHandler, time_t aRate = 60);
{% endif %}
{% if x_jaeger %}
    void with_jaeger(JaegerHandler aHandler);
{% endif %}
{% if x_queue %}
    void with_queue(Threads::QueueExecutor& aQueue);
{% endif %}
{% if x_bearer %}
    void with_authorization(const Jwt::IFace* aManager);
{% endif %}
{% if x_discovery %}
    void with_discovery(boost::asio::io_service& aAsio, const std::string& aAddr, const std::string& aService, const SD::NotifyWeight::Params& aParams);
{% endif %}
    void configure(asio_http::RouterPtr aRouter);
    virtual ~server() {};

{# server can respond with plain http status #}
{% call(doc, path, method, name) _for_every_method(doc) %}
    // {{ name }}
    using {{ name }}_parameters = {{ Aname }}::{{ name }}_parameters;
    {%- call(name, k, response) _for_every_response(doc, path, method, name) -%}
        using {{ name }}_response_{{ k }} = {{ Aname }}::{{ name }}_response_{{ k }};
    {%- endcall -%}
    using {{ name }}_response_v = std::variant<
        boost::beast::http::status
        {%- call(name, k, response) _for_every_response(doc, path, method, name) -%}
            , {{ Aname }}::{{ name }}_response_{{ k -}}
        {%- endcall -%}
    >;
    virtual {{ name }}_response_v
    {{ name }}_i(asio_http::asio::io_service& aService,
                 const {{ name }}_parameters& aRequest,
                 asio_http::asio::yield_context yield {% if x_jaeger %}, std::optional<Jaeger::Span>& aTrace {% endif %});
    {%- if x_bearer %}
        virtual bool
        {{ name }}_auth(const Jwt::Claim& aClaim, const {{ name }}_parameters& aRequest);
    {% endif %}

{% endcall %}

private:
{% call(doc, path, method, name) _for_every_method(doc) %}
    void {{ name }}(asio_http::asio::io_service& aService,
                    const asio_http::Request& aRequest,
                    asio_http::Response& aResponse,
                    asio_http::asio::yield_context yield);
{% endcall %}
};

{% else %} {# CPP #}

{% if x_sentry %}
    void server::with_sentry(SentryHandler aHandler, time_t aRate)
    {
        m_SentryRateLimit = aRate;
        m_SentryHandler = aHandler;
    }
{% endif %}
{% if x_jaeger %}
    void server::with_jaeger(JaegerHandler aHandler)
    {
        m_JaegerHandler = aHandler;
    }
{% endif %}
{% if x_queue %}
    void server::with_queue(Threads::QueueExecutor& aQueue)
    {
        m_Queue = &aQueue;
    }
{% endif %}
{% if x_bearer %}
    Jwt::Claim server::__auth_helper(const asio_http::Request& aRequest)
    {
        if (nullptr == m_Jwt)
            throw std::runtime_error("authorization not configured on server");
        const auto sBeastHeader = aRequest["Authorization"];
        std::string_view sHeader(sBeastHeader.data(), sBeastHeader.size());
        if (sHeader.empty())
            throw std::invalid_argument("authorization required");
        const size_t sSpace = sHeader.find(' ');
        if (sSpace == std::string_view::npos)
            throw std::invalid_argument("authorization format error");
        if ("Bearer" != sHeader.substr(0, sSpace))
            throw std::invalid_argument("authorization method error");
        Jwt::Claim sClaim;
        try {
            sClaim = m_Jwt->Validate(sHeader.substr(sSpace + 1));
        } catch (const std::exception& e) {
            throw std::invalid_argument("authorization token: " + std::string(e.what()));
        }
        return sClaim;
    }

    void server::with_authorization(const Jwt::IFace* aManager)
    {
        m_Jwt = aManager;
    }
{% endif %}
{% if x_discovery %}
    void server::with_discovery(boost::asio::io_service& aAsio, const std::string& aAddr, const std::string& aService, const SD::NotifyWeight::Params& aParams)
    {
        SD::NotifyWeight::Params sParams = aParams;
        sParams.notify.key        = "discovery/swagger/" + aService + "/{{ doc['info']['title'] }}/{{ doc['info']['version'] }}/" + aAddr;
        m_Notify = std::make_unique<SD::NotifyWeight>(aAsio, sParams);
    }
{% endif %}
{% call(doc, path, method, name) _for_every_method(doc) %}

    server::{{ name }}_response_v
    server::{{ name }}_i(asio_http::asio::io_service& aService,
                 const {{ name }}_parameters& aRequest,
                 asio_http::asio::yield_context yield {% if x_jaeger %}, std::optional<Jaeger::Span>& aTrace {% endif %})
    {
        return {boost::beast::http::status::not_implemented};
    }
    {% if x_bearer %}
        bool server::{{ name }}_auth(const Jwt::Claim& aClaim, const {{ name }}_parameters& aRequest)
        {
            return false;
        }
    {% endif %}

    void server::{{ name }}(asio_http::asio::io_service& aService,
                    const asio_http::Request& aRequest,
                    asio_http::Response& aResponse,
                    asio_http::asio::yield_context yield)
    {
        namespace http = boost::beast::http;

        auto sPeer = Container::Session::get<std::string>("peer");
        Time::Meter sTimeMeter;
        std::string sTraceId;

        Util::Raii sLogging([&](){
            INFO((sPeer.has_value() ? *sPeer : "<unknown>")
              << ' ' << "{{method}}"
              << ' ' << aRequest.target()
              << ' ' << (unsigned)aResponse.result()
              << ' ' << aResponse.body().size()
              << ' ' << Format::for_human(sTimeMeter.get().to_double()) << 's'
              << (sTraceId.empty() ? std::string() : sTraceId)
            );
        });

        {% if x_prometheus %}
            m_Metrics.requests_{{ name }}.tick();
            Util::Raii sAccount([&](){
                m_Metrics.time_{{ name }}.account(sTimeMeter.get().to_double());
                if (aResponse.result() >= http::status::ok and aResponse.result() < http::status::multiple_choices) m_Metrics.responses_{{ name }}_2xx.tick();
                else if (aResponse.result() >= http::status::bad_request and aResponse.result() < http::status::internal_server_error) m_Metrics.responses_{{ name }}_4xx.tick();
                else if (aResponse.result() >= http::status::internal_server_error) m_Metrics.responses_{{ name }}_5xx.tick();
            });
        {% endif %}
        {% if x_discovery %}
            Util::Raii sNotify([&](){
                if (m_Notify and aResponse.result_int() < 300) {
                    m_Notify->add(sTimeMeter.get().to_double(), time(nullptr));
                }
            });
        {% endif %}

        {% if x_jaeger %}
            auto sTrace = Jaeger::Helper::create(aRequest["traceparent"], "{{ name }}");
            Util::Raii sSendTrace([&sTrace, this]()
            {
                if (sTrace and m_JaegerHandler)
                    m_JaegerHandler(*sTrace);
            });

            auto sTraceParsing = Jaeger::Helper::start(sTrace, "parsing");
            if (sTraceParsing)
                sTraceId = " [J:" + sTraceParsing->trace_id() + ']';
        {% endif %}

        {{ name }}_parameters sParameters;
        if (!sParameters.__test_content_type(aRequest))
        {
            aResponse.result(http::status::unsupported_media_type);
            aResponse.set("X-From-Swagger", "1");
            return;
        }

        auto sResponseStatus = http::status::bad_request;
        try {
            sParameters.__parse(aRequest);

            {% if x_bearer %}
            sResponseStatus = http::status::unauthorized;
            if (!{{ name }}_auth(__auth_helper(aRequest), sParameters))
                throw std::invalid_argument("authorization token rejected");
            {% endif %}
        }
        catch (const std::exception& e) {
            aResponse.result(sResponseStatus);
            aResponse.set("X-From-Swagger", "1");
            aResponse.body() = e.what();
            {% if x_jaeger %} Jaeger::Helper::set_error(sTraceParsing, e.what()); {% endif %}
            {% if x_sentry %}
                std::unique_lock sLock(m_SentryLock, std::defer_lock);
                if (sLock.try_lock() and m_SentryHandler and time(nullptr) > m_SentryLastCall + m_SentryRateLimit)
                {
                    Sentry::Message::Request sRequest;
                    sRequest.method = "{{ method }}";
                    sRequest.url = aRequest.target();
                    sRequest.data = aRequest.body().substr(0, 10240); {# up to 10Kb body #}
                    {%- set p1 = doc['paths'][path].get('parameters', []) | swagger_expand_refs %}
                    {%- set p2 = doc['paths'][path][method].get('parameters', []) | swagger_expand_refs %}
                    {%- set params = p1 + p2 | sort(attribute='name') %}
                    {%- for param in params if param['in'] == 'header' %}
                        if (const auto& x = aRequest["{{ param.name }}"]; !x.empty())
                            sRequest.headers["{{ param.name }}"] = x;
                    {%- endfor %}
                    Sentry::Message sMessage("swagger");
                    if (sResponseStatus == http::status::unauthorized)
                        sMessage.set_request(sRequest).set_exception("unauthorized", e.what());
                    else
                        sMessage.set_request(sRequest).set_exception("bad request", e.what());
                    sMessage.set_version("{{ doc['info']['title'] }}", "{{ doc['info']['version'] }}");
                    if (sPeer.has_value())
                        sMessage.set_user("", *sPeer);
                    m_SentryLastCall = time(nullptr);
                    m_SentryHandler(sMessage);
                }
            {% endif %}
            return;
        }
        {% if x_jaeger %}
            Jaeger::Helper::stop(sTraceParsing);
        {% endif %}

        {% if x_queue %}
            {% if x_jaeger %}
            auto sTraceQueue = Jaeger::Helper::start(sTrace, "queue");
            {% endif %}
            auto sInit = [&](auto handler) mutable {
            auto sHolder = std::make_shared<decltype(handler)>(std::move(handler));
            auto sTask = [&, sHolder](){
            {% if x_jaeger %} Jaeger::Helper::stop(sTraceQueue); {% endif %}
        {% endif %}
        {% if x_jaeger %} auto sTracePerform = Jaeger::Helper::start(sTrace, "perform"); {% endif %}
        try {
            auto sResponse = {{ name }}_i(aService, sParameters, yield {% if x_jaeger %}, sTracePerform{% endif %});
            std::visit([&](auto&& arg) {
                using T = std::decay_t<decltype(arg)>;
                if constexpr (std::is_same_v<T, boost::beast::http::status>)
                {
                    aResponse.result(arg);
                    aResponse.set("X-From-Swagger", "1");
                } else {
                    arg.__format(aRequest, aResponse);
                }
            }, sResponse);
        } catch (const std::exception& e) {
            aResponse.result(http::status::internal_server_error);
            aResponse.set("X-From-Swagger", "1");
            aResponse.body() = e.what();
            {% if x_jaeger %} Jaeger::Helper::set_error(sTracePerform, e.what()); {% endif %}
        }
        {% if x_jaeger %} Jaeger::Helper::stop(sTracePerform); {% endif %}
        {% if x_queue %}
                boost::system::error_code ec;
                (*sHolder)(ec);
            }; // sTask
            m_Queue->insert(std::move(sTask));
            }; // sInit
            boost::asio::async_initiate<asio_http::asio::yield_context, void(boost::system::error_code)>(sInit, yield);
        {% endif %}
    }
{% endcall %}

    void server::configure(asio_http::RouterPtr aRouter) {
        namespace http = boost::beast::http;
        {%- for path in doc['paths'] %}
        aRouter->insert("{{ (doc['servers'][0]['url'], path) | join('') | swagger_prefix }}",
                        [this](asio_http::asio::io_service& aService, const asio_http::Request& aRequest, asio_http::Response& aResponse, asio_http::asio::yield_context yield)
                        {
                            switch (aRequest.method())
                            {
                            {%- for method in doc['paths'][path] if method in ["get", "put", "post", "head", "delete"] %}
                                {%- set name = _name(doc['paths'][path][method]['operationId']) %}
                                {%- if name == '' %}
                                    {%- set name = (method, doc['servers'][0]['url'], path) | join('') | swagger_prefix | replace('/','_') | replace('.','_') %}
                                {% endif %}
                                case http::verb::{{ method | swagger_method }}:
                                    {{ name }}(aService, aRequest, aResponse, yield);
                                    break;
                            {%- endfor -%}
                            default: aResponse.result(http::status::method_not_allowed);
                            }
                            if (0 == aResponse.count(http::field::server))
                                aResponse.set(http::field::server, "Swagger/cxx");
                        }, true /* prefix match */);
        {% endfor %}
    }
{% endif %}
