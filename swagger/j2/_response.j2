{%- set json = response.get('content',{}).get('application/json',{}) | length %}
{%- set binary = (json == 0 and response.get('content',{}) | length == 1) %}
{%- set headers = response.get('headers',{}) %}

{% if not x_hpp_name %}
    struct {{ name }}_response_{{ k }}
        {%- if k | int >= 400 %} : public {{ _err_class(k) }}{%- endif %}
    {
        {%- if binary > 0 %}
            {%- set content_type = response.get('content') | first %}
            std::string body;
        {%- elif json > 0 %}
            {%- set schema = response.get('content',{}).get('application/json').get('schema') -%}
            {{ complex_schema(schema) }}
        {%- endif %}

        {%- for k,v in headers | dictsort %}
            {{ complex_schema(v['schema'], _name(k), True) }}
        {%- endfor %}

        {#  default c-tor for runtime-error #}
        {%- if k | int >= 400 %}
            {{ name }}_response_{{ k }}() : {{ _err_class(k) }}("{{ response['description'] }}"){}
        {%- endif %}

        void __format(const asio_http::Request& aRequest, asio_http::Response& aResponse);
        void __parse(asio_http::Response& aResponse);
    };

{% else %} {# CPP #}

    void {{ name }}_response_{{ k }}::__format(const asio_http::Request& aRequest, asio_http::Response& aResponse) {
        {#  format response body #}
        namespace http = boost::beast::http;
        {%- if binary > 0 %}
            aResponse.set(http::field::content_type, "{{ content_type }}");
            aResponse.body() = std::move(body);
        {%- elif json > 0 %}
            const auto sAccept = aRequest["Accept"];
            const auto sContentType = aRequest["Content-Type"];
            if (sAccept == "application/cbor" or (sAccept.empty() and sContentType == "application/cbor")) {
                cbor::omemstream sOut;
                cbor::write(sOut, body);
                aResponse.set(http::field::content_type, "application/cbor");
                aResponse.body() = std::move(sOut.str());
            } else {
                ::Json::Value sValue = Format::Json::to_value(body);
                aResponse.set(http::field::content_type, "application/json");
                aResponse.body() = Format::Json::to_string(sValue);
            }
        {%- endif %}

        {#  push response headers #}
        {%- for k,v in headers | dictsort %}
            if ( swagger::is_specified({{ _name(k) }}) )
                aResponse.set(swagger::header("{{ k }}"), swagger::format({{ _name(k) }}));
        {%- endfor -%}

        aResponse.result({{ k }});
    }

    void {{ name }}_response_{{ k }}::__parse(asio_http::Response& aResponse)
    {
        [[maybe_unused]] const auto sContentType = aResponse["Content-Type"];
        {%- if binary > 0 %}
            if (!sContentType.empty() and sContentType != "{{ content_type }}") {
                throw std::runtime_error("unexpected content-type: `" + sContentType.to_string() + "`");
            }
            body = aResponse.body();
        {%- elif json > 0 %}
            if (sContentType == "application/cbor") {
                cbor::imemstream sIn(aResponse.body());
                cbor::read(sIn, body);
            } if (sContentType == "application/json" or sContentType.empty()) {
                const auto sJson = Parser::Json::parse(aResponse.body());
                Parser::Json::from_value(sJson, body);
            } else {
                throw std::runtime_error("unexpected content-type: `" + sContentType.to_string() + "`");
            }
        {%- endif %}

        {%- for k,v in headers | dictsort %}
            if (auto sValue = aResponse["{{ k }}"].to_string(); !sValue.empty())
                swagger::parse(sValue, {{ _name(k) }});
        {%- endfor %}
    }
{% endif %}