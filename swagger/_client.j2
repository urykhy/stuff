class client
{
    asio_http::Alive::ManagerPtr m_HttpClient;
    const std::string m_Base;
    log4cxx::LoggerPtr sLogger = Logger::Get("http");
    {% if x_bearer %}
    std::string m_Token;
    {% endif %}

    using Lock = std::unique_lock<std::mutex>;
    std::mutex m_Mutex;
    {% call(doc, path, method, name) _for_every_method(doc) %}
    std::string m_{{ name }}_redirect = {};
    {% endcall %}

public:
    client(asio_http::Alive::ManagerPtr aHttpClient, const std::string& aBase)
    : m_HttpClient(aHttpClient)
    , m_Base(aBase)
    {}

    {% if x_bearer %}
    void __with_token(const std::string& aToken)
    {
        m_Token = aToken;
    }
    {% endif %}

    {% call(doc, path, method, name) _for_every_method(doc) %}
        using {{ name }}_parameters = {{ Aname }}::{{ name }}_parameters;

        {# detect if we have only one successul response kind #}
        {%- set variant_list = [] %}
        {%- call(name, k, response) _for_every_response(doc, path, method, name) -%}
            {%- if k | int < 400 %}
                {% do variant_list.append( Aname + "::" + name + "_response_" + k ) %}
            {%- endif %}
        {%- endcall %}
        {%- if variant_list | length == 1 %}
            {%- set returnType = variant_list | first %}
        {%- else %}
            using {{ name }}_response_v = std::variant<
                {{ variant_list | join(',') }}
            >;
            {%- set returnType = name + "_response_v" %}
        {%- endif %}

        {# client response with successful struct, or throw #}
        {{ returnType }} {{ name }}(const {{ name }}_parameters& aRequest {% if x_jaeger %}, std::optional<Jaeger::Metric::Step*> aTraceParent = std::nullopt, int8_t aTraceOffset = 0{% endif %})
        {
            namespace http = boost::beast::http;
            asio_http::ClientRequest sRequest = aRequest.__format();
            if (Lock sLock(m_Mutex); m_{{ name }}_redirect.empty())
            {
                sRequest.url = m_Base + sRequest.url;
            }
            else
            {
                DEBUG("permanent redirected to " << m_{{ name }}_redirect);
                sRequest.url = m_{{ name }}_redirect + sRequest.url;
            }

            {% if x_jaeger %}
            std::unique_ptr<Jaeger::Metric::Step> sTraceCall;
            if (aTraceParent)
            {
                sTraceCall = std::make_unique<Jaeger::Metric::Step>((*aTraceParent)->child("call {{ name }}"));
                sRequest.headers["traceparent"] = sTraceCall->extract().traceparent();
                if (aTraceOffset > 0)
                    sRequest.headers["tracestate"] = "span_offset=" + Format::to_hex(aTraceOffset);
            }
            {% endif %}
            {% if x_bearer %}
            if (!m_Token.empty())
                sRequest.headers["Authorization"] = "Bearer " + m_Token;
            {% endif %}

            asio_http::Response sResponse;
            int64_t sRedirectCount = 0;
            while (sRedirectCount < 5) {# up to 5 redirects #}
            {
                INFO("{{ method }} " << sRequest.url);
                sResponse = m_HttpClient->async(asio_http::ClientRequest(sRequest)).get(); {# copy request #}
                if (sResponse.result() == asio_http::http::status::temporary_redirect or
                    sResponse.result() == asio_http::http::status::found)
                {
                    DEBUG("temporary redirect");
                    const auto sLocation = sResponse[asio_http::http::field::location];
                    if (sLocation.empty())
                        throw Exception::HttpError(
                            "redirect without location",
                            static_cast<unsigned>(sResponse.result())
                        );
                    sRequest.url = sLocation.to_string();
                }
                else if (sResponse.result() == asio_http::http::status::permanent_redirect or
                         sResponse.result() == asio_http::http::status::moved_permanently)
                {
                    DEBUG("permanent redirect");
                    const auto sLocation = sResponse[asio_http::http::field::location];
                    if (sLocation.empty())
                        throw Exception::HttpError(
                            "redirect without location",
                            static_cast<unsigned>(sResponse.result())
                        );
                    sRequest.url = sLocation.to_string();
                    const auto sParsed = Parser::url(sLocation.to_string());
                    Lock sLock(m_Mutex);
                    m_{{ name }}_redirect = "http://" + sParsed.host + ":" + sParsed.port;
                }
                else
                {
                    break;
                }
                sRedirectCount++;
            }
            {% if x_jaeger %}
            if (sRedirectCount > 0)
                sTraceCall->set_tag(Jaeger::Metric::Tag{"redirect_count", sRedirectCount});
            {% endif %}

            {# error codes from swagger #}
            const auto sFromSwagger = !sResponse["X-From-Swagger"].empty();
            if (sFromSwagger)
            {
                if (sResponse.result() == asio_http::http::status::bad_request)
                    throw std::invalid_argument(sResponse.body());
                throw Exception::HttpError(
                    sResponse.body(),
                    static_cast<unsigned>(sResponse.result()));
            }

            {# normal user responses #}
            {% call(name, k, response) _for_every_response(doc, path, method, name) %}
                if (sResponse.result() == asio_http::http::int_to_status({{ k }}))
                {
                    {{ name }}_response_{{ k }} sResponseBody;
                    sResponseBody.__parse(sResponse);
                    {%- if k | int < 400 %}
                        return sResponseBody;
                    {%- else %}
                        throw sResponseBody;
                    {%- endif %}
                }
            {% endcall %}

            {# no match - throw #}
            throw Exception::HttpError(
                "unexpected http response: " + sResponse.body(),
                static_cast<unsigned>(sResponse.result()));
        }
    {% endcall %}
};
