#include <regex>
#include <set>
#include <string>
#include <variant>
#include <vector>

#include "Format.hpp"

#include <asio_http/Alive.hpp>
#include <asio_http/Router.hpp>
#include <cbor/cbor.hpp>
#include <container/Algorithm.hpp>
#include <container/Session.hpp>
#include <exception/Error.hpp>
#include <format/Float.hpp>
#include <jwt/JWT.hpp>
#include <unsorted/Log4cxx.hpp>

{% set x_prometheus = doc['info'].get('x-prometheus', false) %}
{% if x_prometheus %}
    #include <time/Meter.hpp>
    #include <prometheus/Metrics.hpp>
{% endif %}

{% set x_sentry = doc['info'].get('x-sentry', false) %}
{% if x_sentry %}
    #include <container/Session.hpp>
    #include <sentry/Message.hpp>
{% endif %}

{% set x_queue = doc['info'].get('x-queue', false) %}
{% if x_queue %}
    #include <threads/SafeQueue.hpp>
{% endif %}

{% set x_jaeger = doc['info'].get('x-jaeger', false) %}
{% if x_jaeger %}
    #include <jaeger/Helper.hpp>
{% endif %}

{% set bearer_schemas = [] %}
{% for sc, val in doc.get('components',{}).get('securitySchemes',{}).items() if val['scheme'] == 'bearer' %}
    {% do bearer_schemas.append(sc) %}
{% endfor %}
{% if bearer_schemas | length > 1 %}
    {{ swagger_raise('only one bearer scheme supported') }}
{% endif %}
{% set bearer_scheme = bearer_schemas | first | default('') %}
{% set x_bearer = doc.get('security',[]) | selectattr(bearer_scheme, 'defined') | list | length %}

{% macro complex_schema(schema, name='body', opt=False) -%}
    {%- for s in schema | swagger_decode(name) %}
        {%- if 'fields' in s %}
            struct {{ s.type }} {
                {%- for t in s.fields | sort(attribute='name') %}
                    {{ t.type | swagger_type }} {{ t.name }} = {};
                {%- endfor %}
                ::Json::Value to_json() const {
                    ::Json::Value sValue(::Json::objectValue);
                    {%- for t in s.fields | sort(attribute='name') %}
                        sValue["{{ t.name }}"] = Format::Json::to_value({{ t.name }});
                    {%- endfor %}
                    return sValue;
                }
                void from_json(const ::Json::Value& aJson) {
                    {%- for t in s.fields | sort(attribute='name') %}
                        Parser::Json::from_value(aJson, "{{ t.name }}", {{ t.name }});
                    {%- endfor %}
                }
                void cbor_write(cbor::ostream& aOut) const {
                    cbor::write(aOut, {{ s.fields | sort(attribute='name') | map(attribute='name') | join(',') }});
                }
                void cbor_read(cbor::istream& aIn) {
                    cbor::read(aIn, {{ s.fields | sort(attribute='name') | map(attribute='name') | join(',') }});
                }
            };
            {%- if loop.last %}
                {%- if opt == True %}std::optional<{% endif %}{{ s.type | swagger_type }}{%- if opt %}>{% endif %} {{ s.name }} = {};
            {%- endif %}
        {%- else %}
            {%- set x_opt = opt == True and s.type is not swagger_is_array %}
            {%- if x_opt == True %}std::optional<{% endif %}{{ s.type | swagger_type }}{%- if x_opt %}>{% endif %} {{ s.name }} = {};
        {%- endif %}
    {%- endfor %}
{%- endmacro %}

{% macro _err_class(k) %}
    {%- if k | int in (400, 403, 404, 405, 412, 413, 417, 422, 501) -%}
        std::invalid_argument
    {%- else -%}
        std::runtime_error
    {%- endif -%}
{% endmacro %}

{% macro _name(n) %}
    {%- if n is mapping %}
        {{- n.name | lower | replace('-','_') -}}
    {%- else %}
        {{- n | lower | replace('-','_') -}}
    {%- endif %}
{%- endmacro %}

{% macro _for_every_method(doc) %}
    {%- for path in doc['paths'] %}
        {%- for method in doc['paths'][path] if method in ["get", "put", "post", "head", "delete"] %}
            {%- set name = _name(doc['paths'][path][method]['operationId']) %}
            {%- if name == '' %}
                {%- set name = (doc['servers'][0]['url'], path) | join('') | swagger_prefix | replace('/','_') %}
            {% endif %}
            {{ caller(doc, path, method, name) }}
        {%- endfor %}
    {%- endfor %}
{% endmacro %}

{% macro _for_every_response(doc, path, method, name) %}
    {%- for k,v in doc['paths'][path][method].get('responses',{}) | dictsort %}
        {%- set response = v | swagger_expand_ref %}
        {{ caller(name, k, response) }}
    {%- endfor %}
{% endmacro %}

{% macro _parameters(doc, path, method) %}
    {%- set p1 = doc['paths'][path].get('parameters', []) | swagger_expand_refs %}
    {%- set p2 = doc['paths'][path][method].get('parameters', []) | swagger_expand_refs %}
    {%- set params = p1 + p2 | sort(attribute='name') %}
{% endmacro %}

{% macro _limit(param) %}
    {%- if param['schema'].get('enum', none) is not none %}
        static const std::set<{{ param.schema.type | swagger_type }}> sAllowed ={ {{ param | swagger_enum }} };
        if (sAllowed.find({{ _name(param) }}.value()) == sAllowed.end())
            throw std::invalid_argument("param `{{ param.name }}` has not allowed value");
    {%- endif -%}

    {# number limits #}
    {%- if param['schema'].get('type', none) in ('integer','number') %}
        {% with %}
        {%- set xname = _name(param) %}
        {%- set schema = param['schema'] %}
        {%- set have_limit = ('minimum' in schema) or ('maximum' in schema) or ('multipleOf' in schema) %}
        {%- if have_limit %}
            {%- if 'minimum' in schema %}
                if ({{ xname }}.value() < {%- if schema.get('exclusiveMinimum', false) is false %}={%- endif %} {{ schema['minimum'] }})
                    throw std::invalid_argument("param `{{ param.name }}` violates minimum limit");
            {%- endif %}
            {%- if 'maximum' in schema %}
                if ({{ xname }}.value() > {%- if schema.get('exclusiveMaximum', false) is false %}={%- endif %} {{ schema['maximum'] }})
                    throw std::invalid_argument("param `{{ param.name }}` violates maximum limit");
            {%- endif %}
            {%- if 'multipleOf' in schema %}
                if ({{ xname }}.value() % {{ schema['multipleOf'] }} != 0)
                    throw std::invalid_argument("param `{{ param.name }}` violates multipleOf limit");
            {%- endif %}
        {%- endif %}
        {%- endwith %}
    {%- endif -%}

    {# string limits #}
    {%- if param['schema'].get('type', none) == 'string' %}
        {% with %}
        {%- set xname = _name(param) %}
        {%- set schema = param['schema'] %}
        {%- set have_limit = ('minLength' in schema) or ('maxLength' in schema) or ('pattern' in schema) %}
        {%- if have_limit %}
            {%- if 'minLength' in schema %}
                if ({{ xname }}.value().size() < {{ schema['minLength'] }})
                    throw std::invalid_argument("param `{{ param.name }}` violates minimum string length");
            {%- endif %}
            {%- if 'maxLength' in schema %}
                if ({{ xname }}.value().size() > {{ schema['maxLength'] }})
                    throw std::invalid_argument("param `{{ param.name }}` violates maximum string length");
            {%- endif %}
            {%- if 'pattern' in schema %}
                if (!std::regex_match({{ xname }}.value(), std::regex("{{ schema['pattern'] }}")))
                    throw std::invalid_argument("param `{{ param.name }}` violates pattern");
            {%- endif %}
        {%- endif %}
        {%- endwith %}
    {%- endif -%}

    {# array limits #}
    {%- if param['schema'].get('type', none) == 'array' %}
    {% with %}
        {%- set xname = _name(param) %}
        {%- set schema = param['schema'] %}
        {%- set have_limit = ('minItems' in schema) or ('maxItems' in schema) or ('uniqueItems' in schema) %}
        {%- if have_limit %}
            {%- if 'minItems' in schema %}
                if ({{ xname }}.size() < {{ schema['minItems'] }})
                    throw std::invalid_argument("param `{{ param.name }}` violates minimum array length");
            {%- endif %}
            {%- if 'maxItems' in schema %}
                if ({{ xname }}.size() > {{ schema['maxItems'] }})
                    throw std::invalid_argument("param `{{ param.name }}` violates maximum array length");
            {%- endif %}
            {%- if 'uniqueItems' in schema %}
                if (!Container::is_unique({{ xname }}))
                    throw std::invalid_argument("param `{{ param.name }}` contain duplicates");
            {%- endif %}
        {%- endif %}
        {%- if param.in == 'query' %}
            {%- if param.get('style','form') != 'form' or param.get('explode', true) != false %}
                {{ swagger_raise('only [style=form, explode=false] arrays are supported in query') }}
            {%- endif %}
        {%- elif param.in in ('path', 'header') %}
            {%- if param.get('style','simple') != 'simple' %}
                {{ swagger_raise('only [style=simple] arrays are supported in path') }}
            {%- endif %}
        {%- endif %}
    {%- endwith %}
    {%- endif -%}
{% endmacro %}

namespace api {
    {% set Aname = (doc['info']['title'], doc['info']['version']) | join('_') | replace('.', '_') %}
    namespace {{ Aname }}
    {
        {% call(doc, path, method, name) _for_every_method(doc) %}
            {% include '_params.j2' %}
            {% call(name, k, response) _for_every_response(doc, path, method, name) %}
                {% include '_response.j2' %}
            {% endcall %}
        {% endcall %}

        {% include '_server.j2' %}
        {% include '_client.j2' %}
    }
} // namespace api
